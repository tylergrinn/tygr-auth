{"version":3,"sources":["webpack://@tygr/auth/sass/components/_fonts.scss","webpack://@tygr/auth/sass/_variables.scss","webpack://@tygr/auth/sass/components/_button.scss","webpack://@tygr/auth/sass/components/_form.scss","webpack://@tygr/auth/node_modules/@tygr/logo/sass/index.scss","webpack://@tygr/auth/demo/styles/_variables.scss","webpack://@tygr/auth/sass/components/_header.scss","webpack://@tygr/auth/sass/index.scss","webpack://@tygr/auth/node_modules/@tygr/switch/_index.scss"],"names":[],"mappings":";AAGE,cACE,qCCDM,CDIR,oDAGE,kCCNQ,CCHV,gDAEE,gBACA,sBACA,YACA,WACA,sBAEA,4DACE,gCAEF,kEACE,gCAGF,wDACE,wBChBJ,gBACE,aACA,sBAGF,iBACE,aAGF,iBACE,qBACA,qBACA,sBACA,YAEA,iDACE,qBCfN,WACE,iBAEA,oCAEE,UACA,qBACA,qBACA,kBAGF,kBACE,WCdO,CDeP,6BAGF,kBACE,WClBO,CDmBP,6BAIJ,kBACE,GACE,wBACA,wBAIF,IACE,0BACA,wBAEF,IACE,0BACA,wBAIF,IACE,2BACA,oBAEF,IACE,2BACA,oBAGF,KACE,wBACA,uBAIJ,kBACE,GACE,wBACA,oBAIF,IACE,0BACA,uBAEF,IACE,0BACA,uBAIF,IACE,0BACA,wBAEF,IACE,0BACA,wBAGF,KACE,wBACA,yBEjFF,mBACE,aACA,uBACA,mBCGJ,WACE,aACA,sBACA,oBAEA,mBACE,aACA,uBACA,mBAGF,sBACE,aACA,sBAOF,8CAEE,iGALW,CAMX,iBACA,iBACA,4BClBE,kRDsBF,UACA,aACA,aACA,YACA,UACA,oBACA,kBACA,sHACA,oBC9BE,0SDsBF,UACA,aACA,aACA,YACA,UACA,oBACA,kBACA,sHACA,oBC9BE,0VDsBF,UACA,aACA,aACA,YACA,UACA,oBACA,kBACA,sHACA,oBC9BE,kRDsBF,UACA,aACA,aACA,YACA,UACA,oBACA,kBACA,sHACA,oBAUA,sTACE,aCzCA,0SDsBF,UACA,aACA,aACA,YACA,UACA,oBACA,kBACA,sHACA,oBAUA,8UACE,aAIJ,2BACE,kB","file":"sass.6d32bc6c1b2942a5f5ee.css","sourcesContent":["@import url('https://fonts.googleapis.com/css2?family=Sansita+Swashed&family=Bellota+Text:wght@700&display=swap');\n\n.tygr-auth {\n  h3 {\n    font-family: $display;\n  }\n\n  button,\n  label,\n  input {\n    font-family: $paragraph;\n  }\n}\n","$accent-1: rgba(0, 0, 0, 0.4) !default;\n$accent-2: rgba(0, 0, 0, 0.7) !default;\n\n$display: 'Sansita Swashed', cursive;\n$paragraph: 'Bellota Text', cursive;\n",".tygr-auth {\n  button,\n  input[type='submit'] {\n    background: none;\n    border: 1px solid black;\n    padding: 4px;\n    margin: 8px;\n    background-color: white;\n\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.1);\n    }\n    &.selected {\n      background-color: rgba(0, 0, 0, 0.2);\n    }\n\n    svg {\n      margin: 0px 3px -2px 3px;\n    }\n  }\n}\n",".tygr-auth {\n  form {\n    display: flex;\n    flex-direction: column;\n  }\n\n  label {\n    margin: 0 8px;\n  }\n\n  input {\n    display: inline-block;\n    margin: 0 8px 8px 8px;\n    border: 1px solid black;\n    padding: 8px;\n\n    &:invalid:not(:placeholder-shown) {\n      border: 1px solid red;\n    }\n  }\n}\n","@import 'variables';\n\n.tygr-logo {\n  overflow: visible;\n\n  .cls-1,\n  .cls-2 {\n    fill: none;\n    stroke-linecap: round;\n    stroke-miterlimit: 10;\n    stroke-width: 72px;\n  }\n\n  .cls-1 {\n    stroke: $accent-1;\n    animation: _cls-1 3s infinite;\n  }\n\n  .cls-2 {\n    stroke: $accent-2;\n    animation: _cls-2 3s infinite;\n  }\n}\n\n@keyframes _cls-1 {\n  0% {\n    stroke-dasharray: 1 3475;\n    stroke-dashoffset: -3475;\n  }\n\n  /* T */\n  25% {\n    stroke-dasharray: 361 2000;\n    stroke-dashoffset: -1612;\n  }\n  40% {\n    stroke-dasharray: 361 2000;\n    stroke-dashoffset: -1612;\n  }\n\n  /* G */\n  65% {\n    stroke-dasharray: 1048 2963;\n    stroke-dashoffset: 0;\n  }\n  70% {\n    stroke-dasharray: 1048 2963;\n    stroke-dashoffset: 0;\n  }\n\n  100% {\n    stroke-dasharray: 1 3900;\n    stroke-dashoffset: 425;\n  }\n}\n\n@keyframes _cls-2 {\n  0% {\n    stroke-dasharray: 1 2800;\n    stroke-dashoffset: 0;\n  }\n\n  /* T */\n  25% {\n    stroke-dasharray: 445 2111;\n    stroke-dashoffset: -158;\n  }\n  40% {\n    stroke-dasharray: 445 2111;\n    stroke-dashoffset: -158;\n  }\n\n  /* G */\n  65% {\n    stroke-dasharray: 183 1518;\n    stroke-dashoffset: -1518;\n  }\n  70% {\n    stroke-dasharray: 183 1518;\n    stroke-dashoffset: -1518;\n  }\n\n  100% {\n    stroke-dasharray: 1 2800;\n    stroke-dashoffset: -2711;\n  }\n}\n","$accent-1: white;\n$accent-2: yellow;\n","@import '@tygr/logo/sass';\n\n.tygr-auth {\n  .header {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n","@import 'variables';\n\n@import '@tygr/switch';\n\n@import 'components/fonts';\n@import 'components/button';\n@import 'components/form';\n@import 'components/header';\n\n.tygr-auth {\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n\n  .header {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .providers {\n    display: flex;\n    flex-direction: column;\n  }\n\n  $duration: 300ms;\n  $transition: opacity $duration, max-height $duration, margin $duration,\n    border $duration, padding $duration, transform $duration;\n\n  [data-auth],\n  [data-prov] {\n    transition: $transition;\n    max-height: 232px;\n    overflow: visible;\n    transform-origin: top center;\n  }\n\n  @mixin hide {\n    opacity: 0;\n    max-height: 0;\n    margin: 0 8px;\n    border: none;\n    padding: 0;\n    pointer-events: none;\n    visibility: hidden;\n    transition: $transition, visibility 0s $duration;\n    transform: scaleY(0);\n  }\n\n  @include switch('auth', login, register, reset-password) {\n    @include hide;\n  }\n\n  @include switch('prov', local, external) {\n    @include hide;\n\n    &#register {\n      display: none;\n    }\n  }\n\n  #login.expanded {\n    margin-right: 30px;\n  }\n}\n","@use 'sass:meta';\n\n/**\n * @param {string} $name The name of the switch\n * @param {...string} $states A list of states the switch can be in\n */\n@mixin switch($name, $states...) {\n  @each $state in $states {\n    &[data-#{$name}-#{$state}],\n    & [data-#{$name}-#{$state}] {\n      // State named $state is currently active\n\n      /**\n       * Hide any elements with the data-$name attribute that has the '!$state' exclusionary syntax\n       * in its value\n       */\n      [data-#{$name}~='!#{$state}'],\n\n      /**\n       * If any elements with the data-$name attribute does not have $state in its value, nor is\n       * the value using the exclusionary syntax, then hide it\n       */\n      [data-#{$name}]:not([data-#{$name}~='#{$state}']):not([data-#{$name}*='!']) {\n        @if (content-exists()) {\n          // Let mixin consumer override default inactive state styles\n          @content;\n        } @else {\n          display: none;\n          pointer-events: none;\n        }\n      }\n    }\n  }\n}\n"],"sourceRoot":""}